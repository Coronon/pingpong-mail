# Interface to listen on
# Use 0.0.0.0 to receive connections from all interfaces
bind_host: 0.0.0.0

# Port to listen on
# Most email traffic between servers flows through port 25. Port 587 is mainly
# used for submission from client -> server and should require authentication.
bind_port: 25

# Path to look for a TLS certificate (preferably fullchain)
# The server will periodically reload the certificate to avoid any downtime
# when certificates expire or change. Without a valid TLS configuration, the
# SMTP server will not be able to encrypt traffic.
# Absolute paths with symlinks are recommended.
# You could setup certbot with letsencrypt (and possibly mount in a container):
# /etc/letsencrypt/live/ping-pong.email/fullchain.pem
tls_cert_path:

# Path to look for the corresponding TLS key
# For explanation see above.
tls_key_path:

# Seconds to cache a loaded TLS certificate for
# Reloading the certificates periodically allows changing them without having to
# restart the server itself, thus preventing downtime.
# After the cache duration expires, the certificate is reloaded from the paths
# above. Set to `0` to reload certificates with every request and `-1` to cache
# them indefinitely.
tls_cache_duration: 300

# Minutes before TLS certificate expiry, the cache should be disabled
# This is useful to always look for a new certificate when the current one is
# about to expire. Optimally, this threshold should never be hit and only serve as
# a safety precaution. The default is 48 hours.
tls_cache_expiry_threshold: 1440

# Welcome message for SMTP session upon connection from remote
# Some providers expect the host name of the email server here
smtp_welcome_message: PingPong email tester

# Canonical hostname for this server used when connecting to a remote MTA in the
# HELO/EHLO command to identify ourselves
server_name: mail.ping-pong.email

# Ports to try to deliver replies to in order
# Should probably be left with the default
delivery_ports: [25, 2525, 587]

# Restricts addresses that can be used as the `RCPT TO:` (RFC5321)
# The below value will be treated as a regular expression, so be sure to escape
# any characters with a special meaning, e.g. '.' -> '\.'.
# When using wildcards to allow any recipient domain, beware that some services
# might consider you an open relay for that. Also ensure that you specify
# `reply_address` to not accidentally impersonate anyone!
# If left empty, no checks will be applied and all mail accepted.
restrict_inbox: ^.+@ping-pong\.email$

# Force some string at the beginning of received mails subjects
# Useful when you don't want to service automatic spam emails.
# All emails without this prefix will be rejected. Leave empty to disable.
force_subject_prefix: "PING "

# Maximum size of an email, after which a message is rejected in bytes.
# The default is 1 MiB.
max_message_size: 1048576

# Forces all incoming mail to pass DMARC -> either SPF or DKIM
# You should definitely leave this enabled when your instance is exposed to the
# internet to not become a spam origin. People and bots could fake the sender
# and use the instance effectively as an open relay.
enable_dmarc: true

# Address used in the `MAIL FROM:` (RFC5321) when replying to emails
# You probably want to use one from your domain, but can specify anything.
# Leave this empty to use the first address from `RCPT TO:` (RFC5321) of the
# email responding to.
reply_address: check@ping-pong.email

# Address used in the <From:> header when replying to emails
# RFC 5322 address, e.g. "Barry Gibbs <bg@example.com>"
reply_from: PingPong Email <check@ping-pong.email>

# Subject used when replying to emails
# The variable `{ORIG_SUBJ}` will be replaced with the unaltered subject of the
# received email
reply_subject: PONG - '{ORIG_SUBJ}'

# Message body used when replying to emails
# The variable `{ORIG_BODY}` will be replaced with the unaltered body
# (without headers) of the received email
# The variable `{TIME}` will be replaced with the current ISO 8601 timestamp
# You may not want to include the original message as many email clients add
# content in multiple formats, all ASCII encoded. It should however be fine for
# automatically generated, plain emails.
reply_message: |
  Thank you for using ping-pong.email

  Time: {TIME}
